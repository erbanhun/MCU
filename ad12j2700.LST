C51 COMPILER V7.06   AD12J2700                                                             11/28/2016 13:19:33 PAGE 1   


C51 COMPILER V7.06, COMPILATION OF MODULE AD12J2700
OBJECT MODULE PLACED IN ad12j2700.OBJ
COMPILER INVOKED BY: d:\Keil\C51\BIN\C51.EXE ad12j2700.c COMPACT BROWSE DEBUG OBJECTEXTEND

stmt level    source

   1          #include "C8051F340.h"
   2          #define uchar unsigned char
   3          #define uint  unsigned int
   4          #define ulong unsigned long
   5          
   6          sbit AD0_SCSB    = P0^6;                //output
   7          sbit AD0_SDO    = P0^7;         //input
   8          sbit AD0_SDI    = P1^0;         //output
   9          sbit AD0_SCLK    = P1^1;                //output
  10          sbit AD1_SCSB    = P1^2;                //output
  11          sbit AD1_SDO    = P1^3;         //input
  12          sbit AD1_SDI    = P1^4;         //output
  13          sbit AD1_SCLK    = P1^5;                //output
  14          sbit LMK_SYNC   = P2^3;         //output
  15          
  16          extern void delay(uint cnt);                     // 延时
  17          void AD_SPI(ulong add, uchar num);       // write AD 
  18          
  19          void iniAD12J2700(uchar number);                         // 初始化ADC,0:power down;1:normal
  20          uchar read_AD0(ulong add);               //read ADC0
  21          uchar read_AD1(ulong add);               //read ADC1
  22          
  23          /*---------------------------------------
  24          purpose:初始化ADC
  25          parameters:  0:power down;1:normal
  26          modify:
  27          ----------------------------------------*/
  28          void iniAD12J2700(uchar number)
  29          { idata uchar i=0;
  30   1              delay(5);
  31   1      //      P0MDOUT=0XFE;
  32   1      //      P1MDOUT=0XDF;
  33   1          //-------ad set-------//
  34   1              if(number==0)
  35   1              {
  36   2                      AD_SPI(0x201,0x0e);                     //power down AD
  37   2                      AD_SPI(0x200,0x10);                     //update AD register
  38   2              }
  39   1              else
  40   1              {       AD_SPI(0x000,0xbc);                                                      //power up reset
  41   2                AD_SPI(0x033,0xc7);
  42   2                      AD_SPI(0x201,0x5e);     //JESD_EN=0        0-scrmber enable 10111 k-1=23 1 ddr fb=2fs 0 jesd_en disabled
  43   2                      AD_SPI(0x200,0x32);//program DECIMATE,SCRAM_EN,KM1,DDR  decimate by 4   0x32
  44   2                AD_SPI(0x203,0x00);   // did
  45   2                      AD_SPI(0x057,0x13);
  46   2                      AD_SPI(0x066,0x03);     //configre the calibration settings
  47   2                      AD_SPI(0x050,0x0e);//initiate a calibration CAL_SFT=1
  48   2                      AD_SPI(0x058,0x02);//enable test  0x02
  49   2                      AD_SPI(0x202,0x80);//1 p54=1,0 sync_se 00 reserved 0000(test disabled) 0001 PRBS 7      AD_SPI(0x058,0x04);
             -//enable test
  50   2      
  51   2                      AD_SPI(0x20c,0x01);//1 : Use the NCO_SEL register
  52   2                      AD_SPI(0x20d,0x00);//choose preset 0
  53   2                      //AD_SPI(0x20e,0xc0);
  54   2                      //AD_SPI(0x20f,0x06);//NCO_RDIV=1728;fstep=10khz
C51 COMPILER V7.06   AD12J2700                                                             11/28/2016 13:19:33 PAGE 2   

  55   2                      AD_SPI(0x210,0x00);
  56   2                      AD_SPI(0x211,0x00);
  57   2                      AD_SPI(0x212,0xc0);
  58   2                      AD_SPI(0x213,0x3e);      //fnco =2754.0-2211.84M*/ 3ec00000
  59   2                      AD_SPI(0x201,0x5f);//JESD_EN=1
  60   2              //apply one SYSREF rising edge
  61   2              //assert SYNC~
  62   2              //de-assert SYNC~ ,ILA PROCESS BEGINS
  63   2              //NORMAL DATA OUTPUT
  64   2              read_AD1(0x201);
  65   2                           read_AD1(0x213);
  66   2                                 read_AD0(0x201);
  67   2                                   read_AD0(0x213);
  68   2              }
  69   1      }
  70          /*---------------------------------------
  71          purpose:在ADC指定的地址写寄存器的值
  72          parameters:
  73          modify:
  74          ----------------------------------------*/
  75          
  76          void AD_SPI(ulong add, uchar num)
  77          {       
  78   1              idata uchar i=0;
  79   1              idata ulong reg=0;
  80   1              AD0_SCSB=1;
  81   1              AD1_SCSB=1;
  82   1              reg=add;
  83   1              reg=reg<<8;
  84   1              reg=reg+num;
  85   1              AD0_SCSB=0;
  86   1              AD1_SCSB=0;
  87   1      
  88   1              do
  89   1              {
  90   2                      if((reg&0x800000) == 0x800000)
  91   2                      {       AD0_SDI = 1;
  92   3                              AD1_SDI = 1; }
  93   2                      else
  94   2                      {       AD0_SDI = 0;
  95   3                              AD1_SDI = 0;  }
  96   2                      AD0_SCLK = 0;
  97   2                      AD1_SCLK = 0;
  98   2                      delay(10);                                              //最小50ns
  99   2                      AD0_SCLK = 1;
 100   2                      AD1_SCLK = 1;
 101   2                      delay(10);
 102   2                      AD0_SCLK = 0;
 103   2                      AD1_SCLK = 0;
 104   2                      reg=reg<<1;
 105   2                      i++;
 106   2              }while(i<24);
 107   1              AD0_SCSB=1;
 108   1              AD1_SCSB=1;
 109   1      
 110   1      }
 111          
 112          /*---------------------------------------
 113          purpose:read ADC0
 114          parameters:
 115          modify:
 116          ----------------------------------------*/                                                                       
C51 COMPILER V7.06   AD12J2700                                                             11/28/2016 13:19:33 PAGE 3   

 117          uchar read_AD0(ulong add)
 118          {       
 119   1              idata uchar i=0;
 120   1              idata ulong reg=0;
 121   1              idata uchar da_temp,temp;
 122   1                      
 123   1              AD0_SCSB=1;
 124   1      
 125   1              reg=add+0x8000;                                         //16bit instruction
 126   1              AD0_SCSB=0;
 127   1      
 128   1              do                                                                      
 129   1              {
 130   2                      if((reg&0x8000) == 0x8000)
 131   2                              AD0_SDI = 1;
 132   2                      else
 133   2                              AD0_SDI = 0;
 134   2                      AD0_SCLK = 0;
 135   2                      delay(10);                                              //最小50ns
 136   2                      AD0_SCLK = 1;
 137   2                      delay(10);
 138   2                      AD0_SCLK = 0;
 139   2                      reg=reg<<1;
 140   2                      i++;
 141   2              }while(i<16);
 142   1              i=0;
 143   1      
 144   1              AD0_SDO=1;
 145   1              do
 146   1              {
 147   2                      AD0_SCLK = 0;
 148   2                      delay(10);                                              //最小50ns
 149   2                      AD0_SCLK = 1;
 150   2                      da_temp=da_temp<<1;
 151   2                      temp=AD0_SDO;
 152   2                      da_temp=temp+da_temp;
 153   2                      delay(10);
 154   2                      AD0_SCLK = 0;
 155   2                      i++;
 156   2              }while(i<8);
 157   1              AD0_SCSB=1;
 158   1      
 159   1      
 160   1              return da_temp;
 161   1      }
 162          
 163          /*---------------------------------------
 164          purpose:read ADC1
 165          parameters:
 166          modify:
 167          ----------------------------------------*/                                                                       
 168          uchar read_AD1(ulong add)
 169          {       
 170   1              idata uchar i=0;
 171   1              idata ulong reg=0;
 172   1              idata uchar da_temp,temp;
 173   1                      
 174   1              AD1_SCSB=1;
 175   1      
 176   1              reg=add+0x8000;                                         //16bit instruction
 177   1      
 178   1              AD1_SCSB=0;
C51 COMPILER V7.06   AD12J2700                                                             11/28/2016 13:19:33 PAGE 4   

 179   1              do                                                                      
 180   1              {
 181   2                      if((reg&0x8000) == 0x8000)
 182   2                              AD1_SDI = 1;
 183   2                      else
 184   2                              AD1_SDI = 0;
 185   2                      AD1_SCLK = 0;
 186   2                      delay(10);                                              //最小50ns
 187   2                      AD1_SCLK = 1;
 188   2                      delay(10);
 189   2                      AD1_SCLK = 0;
 190   2                      reg=reg<<1;
 191   2                      i++;
 192   2              }while(i<16);
 193   1              i=0;
 194   1      
 195   1              AD1_SDO=1;
 196   1              do
 197   1              {
 198   2                      AD1_SCLK = 0;
 199   2                      delay(10);                                              //最小50ns
 200   2                      AD1_SCLK = 1;
 201   2                      da_temp=da_temp<<1;
 202   2                      temp=AD1_SDO;
 203   2                      da_temp=temp+da_temp;
 204   2                      delay(10);
 205   2                      AD1_SCLK = 0;
 206   2                      i++;
 207   2              }while(i<8);
 208   1              AD1_SCSB=1;
 209   1      
 210   1      
 211   1              return da_temp;
 212   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    818    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----      14
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----      20
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
