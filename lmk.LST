C51 COMPILER V7.06   LMK                                                                   12/01/2016 20:41:28 PAGE 1   


C51 COMPILER V7.06, COMPILATION OF MODULE LMK
OBJECT MODULE PLACED IN lmk.OBJ
COMPILER INVOKED BY: d:\Keil\C51\BIN\C51.EXE lmk.c COMPACT BROWSE DEBUG OBJECTEXTEND

stmt level    source

   1          #include "C8051F340.h"
   2          #define uchar unsigned char
   3          #define uint  unsigned int
   4          #define ulong unsigned long
   5          
   6          sbit LMK_RESET  = P2^3;         //output
   7          sbit LMK_SYNC   = P2^4;         //output
   8          sbit LMK_SCK    = P2^5;         //output
   9          sbit LMK_SDIO   = P2^6;         //output
  10          sbit LMK_CSB    = P2^7;         //output
  11          
  12          sbit STATUS_LD1 = P1^6; // input
  13          sbit STATUS_LD2 = P1^7; // input
  14          sbit CLKIN_SEL0 = P2^1; // input
  15          sbit CLKIN_SEL1 = P2^2; // input
  16          extern void delay(uint cnt);                     // 延时
  17          
  18          
  19          void iniLMK04828(void);                  // 初始化LMK04828
  20          uchar read_CLK04828(uint add);
  21          void CLK_SPI04828(uint add, uchar num);
  22          
  23          /*---------------------------------------
  24          purpose:初始化CLK
  25          input:10M, output:2211.84M
  26          
  27          ----------------------------------------*/
  28          
  29          /*---------------------------------------
  30          purpose:在CLK指定的地址写寄存器的值
  31          parameters:
  32          modify:
  33          ----------------------------------------*/
  34          
  35          
  36           void iniLMK04828(void)
  37          {               idata uchar a=0;
  38   1              
  39   1              LMK_RESET  =0;  
  40   1                      delay(5);
  41   1                      LMK_RESET  =1;  
  42   1              delay(5);
  43   1                      LMK_RESET  =0;  
  44   1                      delay(5);
  45   1      a=read_CLK04828(0x13b);
  46   1      CLK_SPI04828(0x13b,0x12);
  47   1      a=read_CLK04828(0x13b);
  48   1      
  49   1      CLK_SPI04828(0X0000,0X80);//Programming register 0x000 with RESET = 1.
  50   1      CLK_SPI04828(0X0002,0X00);// normal:0;powerdown:1//Programming registers in numeric order from 0x000 to 0x
             -165.
  51   1      
  52   1      CLK_SPI04828(0X0100,0X10);      //0,1 138.24MHz,1/16,LVDS
  53   1      CLK_SPI04828(0X0103,0X00);
  54   1      CLK_SPI04828(0X0104,0X20);
C51 COMPILER V7.06   LMK                                                                   12/01/2016 20:41:28 PAGE 2   

  55   1      CLK_SPI04828(0X0106,0X70);
  56   1      CLK_SPI04828(0X0107,0X11);       //format lvds,lvds
  57   1      
  58   1      //      CLK_SPI04828(0X0105,0X14);
  59   1              
  60   1      /*CLK_SPI04828(0X0108,0X04); //2,3  552.96MHz,1/4,LVPECL
  61   1      CLK_SPI04828(0X0109,0X45); //CNTL=5,CNTH=4
  62   1              CLK_SPI04828(0X010e,0X70);//DDLY_PD=0
  63   1              CLK_SPI04828(0X0141,0X02);//DDLY_EN=1
  64   1              CLK_SPI04828(0X0144,0X7D);//SYNC_DIS2=0,QITA =1
  65   1              CLK_SPI04828(0X0143,0X13);//SYNC_MODE=3
  66   1              CLK_SPI04828(0X0143,0X12);
  67   1              CLK_SPI04828(0X0139,0X02);//SYNC_MODE=2 SYSREF_MUX=2
  68   1              CLK_SPI04828(0X0142,0X08);//DDLY_STEP_CNT=1
  69   1      
  70   1      CLK_SPI04828(0X010b,0X00);
  71   1      CLK_SPI04828(0X010c,0X20);
  72   1      CLK_SPI04828(0X010d,0X18);
  73   1      CLK_SPI04828(0X010e,0X70);
  74   1      CLK_SPI04828(0X010f,0X55);
  75   1      */
  76   1      
  77   1      CLK_SPI04828(0X0108,0X02); //2,3  1105.926MHz,1/2,LVPECL
  78   1      CLK_SPI04828(0X010b,0X00);
  79   1      CLK_SPI04828(0X010c,0X20);
  80   1      //CLK_SPI04828(0X010d,0X11);
  81   1      CLK_SPI04828(0X010e,0X70);
  82   1      CLK_SPI04828(0X010f,0X55);
  83   1      
  84   1      CLK_SPI04828(0X0110,0X01); //4,5 2211.84MHZ,sin(LVPECL)
  85   1      CLK_SPI04828(0X0113,0X02);
  86   1      CLK_SPI04828(0X0114,0X20);
  87   1      CLK_SPI04828(0X0116,0X70);
  88   1      CLK_SPI04828(0X0117,0X55);
  89   1      
  90   1      CLK_SPI04828(0X0118,0X01);//6,7  2211.84MHZ,sin(LVPECL)
  91   1      CLK_SPI04828(0X011b,0X02);
  92   1      CLK_SPI04828(0X011c,0X20);
  93   1      CLK_SPI04828(0X011e,0X70);
  94   1      CLK_SPI04828(0X011f,0X55);
  95   1      
  96   1      CLK_SPI04828(0X0120,0X10);//8,9 138.24MHz ,1/16,LVDS
  97   1      //CLK_SPI04828(0X0121,0X58);
  98   1      CLK_SPI04828(0X0123,0X00);
  99   1      CLK_SPI04828(0X0124,0X20);
 100   1      CLK_SPI04828(0X0126,0X71); //sdclk pd
 101   1      CLK_SPI04828(0X0127,0X11);
 102   1                                                               
 103   1      CLK_SPI04828(0X0128,0X10); //10,11      138.24MHz ,1/16,LVDS
 104   1      CLK_SPI04828(0X012b,0x00);
 105   1      CLK_SPI04828(0X012c,0X20);      
 106   1      CLK_SPI04828(0X012e,0X71); //sdclk pd
 107   1      CLK_SPI04828(0X012f,0X11);
 108   1      
 109   1      CLK_SPI04828(0X0130,0X10);      // 12,13        138.24MHz ,1/16,LVDS
 110   1      CLK_SPI04828(0X0133,0X00);
 111   1      CLK_SPI04828(0X0134,0X20);
 112   1      //CLK_SPI04828(0X0135,0X16);
 113   1      CLK_SPI04828(0X0136,0X70);
 114   1      CLK_SPI04828(0X0137,0X11);
 115   1      
 116   1      
C51 COMPILER V7.06   LMK                                                                   12/01/2016 20:41:28 PAGE 3   

 117   1      
 118   1      CLK_SPI04828(0X0138,0X40);         //vco=clkin1 ,osc pd
 119   1      
 120   1      
 121   1      
 122   1      
 123   1      
 124   1      
 125   1      
 126   1      //CLK_SPI04828(0X0109,0X58);
 127   1      
 128   1      //CLK_SPI04828(0X0143,0XFD);
 129   1      
 130   1      
 131   1      /*CLK_SPI04828(0X0139,0X02);      //sysref_mux=2
 132   1      CLK_SPI04828(0X013a,0X01);
 133   1      CLK_SPI04828(0X013b,0X80);         //sys=div192
 134   1      
 135   1      CLK_SPI04828(0X0140,0XF9);      
 136   1      CLK_SPI04828(0X0143,0X10);
 137   1      CLK_SPI04828(0X016a,0X60);*/
 138   1      //sysref
 139   1      CLK_SPI04828(0X0143,0X01);       //sync_pol=0,sync_mode=1;
 140   1      CLK_SPI04828(0X0139,0X00);        //sysref_mux=0
 141   1      CLK_SPI04828(0X013a,0X00);
 142   1      CLK_SPI04828(0X013b,0XC0);         //sys=div192 00C0
 143   1      
 144   1      CLK_SPI04828(0X0140,0XF8);        //pd mode  sysref_pd=0,sysref_ddly_pd=0,       sysref_plsr_pd=0
 145   1      CLK_SPI04828(0X0143,0X91);       //sync_en=1;sysref_clr=1;
 146   1      
 147   1      CLK_SPI04828(0X0144,0X00);       //sysref_dis=0;
 148   1      
 149   1      CLK_SPI04828(0X0143,0XB1);       //sysref_pol=1then sysref_pol=0;
 150   1      CLK_SPI04828(0X0143,0X91);       //sysref_pol=1then sysref_pol=0;
 151   1      
 152   1      
 153   1      CLK_SPI04828(0X0144,0Xff);       //sysref_dis=1;
 154   1      CLK_SPI04828(0X0143,0X11);       //sysref_clr=0;
 155   1      
 156   1      CLK_SPI04828(0X016a,0X60);
 157   1      CLK_SPI04828(0X0143,0X10);       //sync_mode=2;
 158   1      CLK_SPI04828(0X0139,0X02);        //sysref_mux=2
 159   1      
 160   1      
 161   1      
 162   1      CLK_SPI04828(0X0146,0X10);
 163   1      CLK_SPI04828(0X0147,0X13);// clk1in
 164   1      CLK_SPI04828(0X0148,0X13);
 165   1      CLK_SPI04828(0X0149,0X13);
 166   1      CLK_SPI04828(0X014A,0X02);       //RESET=INPUT  1
 167   1      CLK_SPI04828(0X0150,0X40);
 168   1      
 169   1      
 170   1      //CLK_SPI04828(0X016a,0X40);
 171   1      CLK_SPI04828(0X1FFD,0X0);
 172   1      CLK_SPI04828(0X1FFE,0X0);
 173   1      CLK_SPI04828(0X1FFF,0X53);              
 174   1      
 175   1      
 176   1      
 177   1              }
 178          
C51 COMPILER V7.06   LMK                                                                   12/01/2016 20:41:28 PAGE 4   

 179          
 180          /*---------------------------------------
 181          purpose:在CLK指定的地址写寄存器的值
 182          parameters:
 183          modify:
 184          ----------------------------------------*/
 185          void CLK_SPI04828(uint add, uchar num)
 186          {       
 187   1              idata uchar i=0;
 188   1              idata ulong reg=0;
 189   1      
 190   1              LMK_SDIO = 0;
 191   1              LMK_CSB=1;
 192   1              reg=add;
 193   1              reg=reg<<8;
 194   1              reg=reg+num;
 195   1              LMK_CSB=0;
 196   1              do
 197   1              {
 198   2                      if((reg&0x800000) == 0x800000)
 199   2                              LMK_SDIO = 1;
 200   2                      else
 201   2                              LMK_SDIO = 0;
 202   2                      LMK_SCK = 0;
 203   2                      delay(10);                                              //最小50ns
 204   2                      LMK_SCK= 1;
 205   2                      delay(10);
 206   2                      LMK_SCK = 0;
 207   2                      reg=reg<<1;
 208   2                      i++;
 209   2              }while(i<24);
 210   1              LMK_CSB=1;
 211   1      }
 212          /*---------------------------------------
 213          purpose:read CLK
 214          parameters:
 215          modify:
 216          ----------------------------------------*/                                                                       
 217          uchar read_CLK04828(uint add)
 218          {       
 219   1              idata uchar i=0;
 220   1              idata uint reg=0;
 221   1              idata uchar da_temp,temp;
 222   1                      
 223   1              LMK_CSB=1;
 224   1              reg=add+0x8000;                                         //16bit instruction
 225   1              LMK_SDIO = 0;
 226   1              LMK_CSB=0;
 227   1              do                                                                      
 228   1              {
 229   2                      if((reg&0x8000) == 0x8000)
 230   2                              LMK_SDIO = 1;
 231   2                      else
 232   2                              LMK_SDIO = 0;
 233   2                      LMK_SCK = 0;
 234   2                      delay(10);                                              //最小50ns
 235   2                      LMK_SCK = 1;
 236   2                      delay(10);
 237   2                      LMK_SCK = 0;
 238   2                      reg=reg<<1;
 239   2                      i++;
 240   2              }while(i<16);
C51 COMPILER V7.06   LMK                                                                   12/01/2016 20:41:28 PAGE 5   

 241   1      
 242   1              i=0;
 243   1      
 244   1         P2MDOUT  = 0xb8;                    //output,p2.6 input
 245   1         P2       = 0x40;
 246   1      
 247   1              do
 248   1              {
 249   2                      LMK_SCK = 0;
 250   2                      delay(10);                                              //最小50ns
 251   2                      LMK_SCK = 1;
 252   2                      da_temp=da_temp<<1;
 253   2                      temp=LMK_SDIO;
 254   2                      da_temp=temp+da_temp;
 255   2                      delay(10);
 256   2                      LMK_SCK = 0;
 257   2                      i++;
 258   2              }while(i<8);
 259   1              LMK_CSB=1;
 260   1      
 261   1         P2MDOUT  = 0xf8;                    //output
 262   1         P2       = 0x00;
 263   1              return da_temp;
 264   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    912    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----       1
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----      11
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
